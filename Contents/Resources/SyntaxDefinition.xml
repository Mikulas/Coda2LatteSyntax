<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
  <head>
    <name>Latte</name>
    <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@#$]]></charsintokens>
    <charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@$]]></charsincompletion>
  </head>
  <states>
    <default id="Base" usesymbolsfrommode="HTML" useautocompletefrommode="HMTL" scope="meta.default">

      <import mode="XML" keywords-only="yes"/>

      <!-- comments -->
      <state id="Latte Comment" type="comment" scope="style.comment.block">
        <begin><regex>{\*</regex></begin>
        <end><regex>\*}[\n\r]</regex></end>
      </state>

    	<state id="Django-Template" color="#000000" usesymbolsfrommode="Django-Template" useautocompletefrommode="Django-Template" scope="language.variable">
        <begin>
          <regex>{</regex>
        </begin>
        <end>
          <regex>}</regex>
        </end>
        <keywords id="Template Tag" color="#00DD00" invert-color="#FF2121" useforautocomplete="yes" scope="markup.processing.languageswitch">
          <regex>{/?|}</regex>
        </keywords>
        <keywords id="Template Tags" color="#881350" invert-color="#EC76B4" useforautocomplete="yes" scope="keyword.control">
          <!-- Template Tags -->
          <string>if</string>
          <string>ifset</string>
          <string>ifCurrent</string>
          <string>foreach</string>
          <string>for</string>
          <string>while</string>
          <string>continueIf</string>
          <string>breakIf</string>
          <string>first</string>
          <string>last</string>
          <string>sep</string>
          <string>var</string>
          <string>default</string>
          <string>capture</string>
          <string>include</string>
          <string>cache</string>
          <string>syntax</string>
          <string>use</string>
          <string>l</string>
          <string>r</string>
          <string>contentType</string>
          <string>block</string>
          <string>define</string>
          <string>include</string>
          <string>includeblock</string>
          <string>layout</string>
          <string>extends</string>
          <string>control</string>
          <string>form</string>
          <string>label</string>
          <string>input</string>
          <string>snippet</string>
          <string>dump</string>
          <string>debugbreak</string>

          <!-- keywords -->
          <string>as</string>
          <string>=></string>
          <string>/</string>
        </keywords>
        <keywords id="Context Variable" color="#DD0000" invert-color="#FF2121" useforautocomplete="no" scope="language.variable">
          <regex>{\s*$|}</regex>
        </keywords>
        <keywords id="Context Variables" color="#825900" invert-color="#FFD67C" useforautocomplete="no" scope="language.variable">
          <regex>{\s*$(.+?)}</regex>
        </keywords>
        <keywords id="Double Quoted Strings" type="string" color="#760F15" invert-color="#F0898E" useforautocomplete="no" scope="string.double">
          <regex>(".*?")</regex>
        </keywords>
        <keywords id="Single Quoted Strings" type="string" color="#760F15" invert-color="#F0898E" useforautocomplete="no" scope="string.single">
          <regex>('.*?')</regex>
        </keywords>
        <keywords id="Filter Parameters: Numeric" useforautocomplete="no" scope="constant.numeric">
          <regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
        </keywords>
        <keywords id="Filter Parameters: Strings" color="#003369" invert-color="#95C9FF" scope="string.double">
          <regex>(:".*?")</regex>
          <regex>(:'.*?')</regex>
          <!--<regex>(:\d+)</regex>-->
        </keywords>
      </state>
    </default>
  </states>
</syntax>